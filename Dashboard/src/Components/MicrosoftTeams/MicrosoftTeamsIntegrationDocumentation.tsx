import React, { FunctionComponent, ReactElement } from "react";
import Card from "Common/UI/Components/Card/Card";
import MarkdownViewer from "Common/UI/Components/Markdown.tsx/MarkdownViewer";

export interface ComponentProps {
  manifest: any;
}

const MicrosoftTeamsIntegrationDocumentation: FunctionComponent<
  ComponentProps
> = (_props: ComponentProps): ReactElement => {
    const markdownText: string = [
      '#### Microsoft Teams Integration – Step-by-Step Guide',
      '',
      'Follow these steps EXACTLY to enable Microsoft Teams notifications (channels + direct messages) in OneUptime.',
      '',
      '---',
      '### 1. Prerequisites',
      '1. You have OneUptime deployed and reachable publicly (via HTTPS).',
      '2. You have Azure AD tenant admin (or sufficient) permissions to create an App Registration and grant admin consent.',
      '',
      '---',
  '### 2. Create Azure AD App Registration (Bot + Graph)',
      '1. Go to Azure Portal → Azure Active Directory → App registrations → New registration.',
      "2. Name: 'OneUptime Teams Bot' (choose any descriptive name).",
      '3. Supported account types: Accounts in any organizational directory (Multitenant).',
  '4. Add these redirect URIs (you can adjust later if you add delegated OAuth features):',
      '   - '+window.location.host+'/api/teams/auth',
      '   - '+window.location.host+'/api/teams/admin-consent',
      '5. Click Register.',
  '6. Copy the Application (client) ID – this will be used for appClientId (single ID for both Bot and Graph features)',
      '',
  'Tip: You can use a single registration for both Bot Framework and Graph features to simplify management.',
      '',
      '---',
      '### 3. Create Azure Bot Resource',
      'You need to create a Bot resource that will handle Teams messages:',
      '1. In Azure Portal, search for "Azure Bot" and click "Create".',
      '2. Fill in the Bot details:',
      '   - **Bot handle**: Choose a unique name (e.g., "oneuptime-teams-bot")',
      '   - **Subscription**: Select your Azure subscription',
      '   - **Resource group**: Use existing or create new',
      '   - **Data residency**: Choose appropriate region',
      '3. In the **Microsoft App ID** section:',
      '   - Select "Use existing app registration"',
      '   - Enter the App ID from step 2 (the Application client ID you copied)',
      '4. Click "Review + create" and then "Create".',
      '5. Once created, go to the Bot resource → **Configuration**:',
      '   - Set **Messaging endpoint** to: `'+window.location.host+'/api/notification/teams/bot/messages`',
      '   - Click "Apply" to save',
      '6. Go back to your App Registration → **Certificates & secrets** → **New client secret**:',
      '   - Add description (e.g., "OneUptime Bot Secret")',
      '   - Choose expiration period',
      '   - Click "Add" and **immediately copy the secret VALUE** (this will be your client secret for app authentication)',
      '',
      '**Note**: Since you\'re using a single App Registration, the client secret will be used for `appClientSecret`.',
      '',
      '---',
  '### 4. Add Required Microsoft Graph Application Permissions',
  'These Graph application permissions are required for channel discovery, creation, membership operations, and reliable notification delivery.',
  'Required application permissions:',
      '- Team.ReadBasic.All',
      '- Channel.ReadBasic.All',
      '- Channel.Create (optional)',
      '- ChannelMember.ReadWrite.All (optional)',
      'After adding: Click "Grant admin consent".',
      '',
      '---',
      '### 5. Prepare the Teams App Manifest (Side-Load)',
      '1. Download Microsoft\'s Teams app manifest sample or export an existing one.',
      '2. Set the botId to your App (client) ID.',
      '3. Ensure valid domains include your deployment host.',
      '4. Add capabilities: team, groupChat, personal (so channel + 1:1 contexts work).',
      '5. Zip the manifest (manifest.json + icon files) and side-load it in Teams (Developer Portal → Apps → Upload).',
      '',
      '---',
    '### 6. Set Environment Variables (ALWAYS FULL SET)',
  'Provide all required variables below:',
      '```env',
    'MICROSOFT_TEAMS_APP_CLIENT_ID=<APP_CLIENT_ID_FROM_STEP_2>',
    'MICROSOFT_TEAMS_APP_CLIENT_SECRET=<CLIENT_SECRET_FROM_STEP_3>',
      '```',
    '**Note**: When using a single App Registration (recommended), use the client secret value from your Azure AD App Registration.',

      '',
      '---',
  '### 7. Helm Values Configuration',
  'In values.yaml:',
  '```yaml',
  'microsoftTeams:',
  '  appClientId: <APP_CLIENT_ID_FROM_STEP_2>',
  '  appClientSecret: <CLIENT_SECRET_FROM_STEP_3>',
  '```',
      '',
      '---',
      '### 9. Deploy / Restart',
      '1. Apply updated values (helm upgrade ...).',
      '2. Wait for pods to restart (check logs for Teams bot adapter initialization).',
      '3. Confirm env vars inside a pod (kubectl exec + printenv | grep MICROSOFT_TEAMS).',
      '',
      '---',
      '### 10. Install Bot into Teams',
      '1. In Teams, add the uploaded app to each target Team.',
      '2. Inside each Team, add the bot to the specific channel(s) for notifications.',
      '3. For direct messages: have each user open a 1:1 chat with the bot (say "hi").',
      '',
      '---',
      '### 11. Seed & Verify Conversation References',
      'When the bot receives its first message in a channel or DM, a conversation reference is stored.',
      'Verification methods:',
      '- Trigger an event in OneUptime that would send a Teams notification and watch logs for: "conversation reference present".',
      '- (If implemented) use any diagnostics endpoint in the UI to list references.',
      '',
      'If a channel lacks a reference: re-open channel, mention or message the bot once.',
      '',
      '---',
      '### 12. Test Notification Flow',
      '1. Create a test incident / alert in OneUptime with a Teams channel target.',
      '2. Check channel: message should appear via bot identity.',
      '3. Test user DM: send a direct notification to a user who seeded a 1:1 chat.',
      '4. Review server logs for any warnings (missing reference / credentials).',
      '',
      '---',
      'Need more? Reach us at hello@oneuptime.com'
    ].join('\n');
    return (
      <Card
        title={`Integrating Microsoft Teams with your OneUptime Project`}
        description={`Microsoft Teams is not connected to OneUptime. Follow these step-by-step instructions to integrate Microsoft Teams with your OneUptime Project.`}
      >
        <MarkdownViewer text={markdownText} />
      </Card>
    );
};

export default MicrosoftTeamsIntegrationDocumentation;
