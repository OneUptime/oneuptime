{
    "name": "@oneuptime/root",
    "version": "3.0.2",
    "description": "One Complete Observability platform.",
    "main": "ts",
    "type": "module",
    "dependencies": {
        "eslint-plugin-react": "^7.34.3",
        "eslint-plugin-unused-imports": "^4.1.0",
        "globals": "^15.6.0",
        "jest": "^30.0.0",
        "mailparser": "^3.7.1",
        "ts-node": "^10.9.2",
        "typeorm": "^0.3.20"
    },
    "devDependencies": {
        "@babel/core": "^7.17.8",
        "@eslint/js": "^9.4.0",
        "@types/eslint__js": "^8.42.3",
        "ejs-lint": "^1.2.2",
        "eslint": "^9.36.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-plugin-prettier": "^5.1.3",
        "husky": "^7.0.0",
        "lint-staged": "^13.2.1",
        "nodemon": "^2.0.20",
        "prettier": "3.3.2",
        "typescript": "^5.9.2",
        "typescript-eslint": "^8.44.1"
    },
    "scripts": {
        "config-to-dev": "node ./Scripts/Install/ReplaceValueInConfig.js ENVIRONMENT development",
        "config-to-ci": "node ./Scripts/Install/ReplaceValueInConfig.js ENVIRONMENT ci",
        "config-to-test": "node ./Scripts/Install/ReplaceValueInConfig.js ENVIRONMENT test && node ./Scripts/Install/ReplaceValueInConfig.js APP_TAG test",
        "config-to-production": "node ./Scripts/Install/ReplaceValueInConfig.js ENVIRONMENT production",
        "prerun": "bash configure.sh",
        "typeorm": "node --require ts-node/register ./node_modules/typeorm/cli.js",
        "uninstall": "bash uninstall.sh",
        "clean-modules": "bash remove-node-modules.sh",
        "install-modules": "bash install-node-modules.sh",
        "lint": "export NODE_OPTIONS='--max-old-space-size=32768' && npx eslint . --cache",
        "fix-lint": "export NODE_OPTIONS='--max-old-space-size=32768' && npx eslint . --fix --cache --debug",
        "fix": "npm run fix-lint",
        "status-check": "bash ./Tests/Scripts/status-check.sh $npm_config_services",
        "start": "export $(grep -v '^#' config.env | xargs) && docker compose up --remove-orphans -d $npm_config_services && npm run status-check",
        "dev-llm": "npm run prerun && export $(grep -v '^#' config.env | xargs) && docker compose -f docker-compose.llm.yml up --remove-orphans -d $npm_config_services",
        "start-llm": "npm run prerun && export $(grep -v '^#' config.env | xargs) && docker compose -f docker-compose.llm.yml up --remove-orphans -d $npm_config_services",
        "build-llm": "npm run prerun && export $(grep -v '^#' config.env | xargs) && docker compose -f docker-compose.llm.yml build $npm_config_services",
        "force-build-llm": "npm run prerun && export $(grep -v '^#' config.env | xargs) && docker compose -f docker-compose.llm.yml build  --no-cache $npm_config_services",
        "ps": "export $(grep -v '^#' config.env | xargs) &&  docker compose ps",
        "save-logs": "export $(grep -v '^#' config.env | xargs) && docker compose logs --tail=100000 $npm_config_services > logs.txt",
        "logs": "export $(grep -v '^#' config.env | xargs) && docker compose logs --tail=100 $npm_config_services",
        "follow-logs": "export $(grep -v '^#' config.env | xargs) && docker compose logs -f --tail=100 $npm_config_services",
        "write-logs": "export $(grep -v '^#' config.env | xargs) && docker compose logs -f $npm_config_services > logs.txt",
        "build": "export $(grep -v '^#' config.env | xargs) && docker compose -f docker-compose.dev.yml build $npm_config_services",
        "force-build": "export $(grep -v '^#' config.env | xargs) && npm run prerun && docker compose -f docker-compose.dev.yml build  --no-cache $npm_config_services",
        "force-build-dev": "npm run config-to-dev && npm run force-build",
        "kill": "npm run stop",
        "prod": "npm run config-to-prod && export $(grep -v '^#' config.env | xargs) && docker compose up -f docker-compose.yml -d",
        "dev": "npm run config-to-dev && npm run prerun && export $(grep -v '^#' config.env | xargs) && docker compose -f docker-compose.dev.yml up  --remove-orphans  -d $npm_config_services",
        "stop": "export $(grep -v '^#' config.env | xargs) && docker compose down --remove-orphans",
        "down": "npm run stop",
        "exec": "export $(grep -v '^#' config.env | xargs) && docker compose -f docker-compose.yml exec -it",
        "prune": "docker system prune",
        "remove-all-containers": "docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q) || echo 'No running containers'",
        "prepare": "husky install",
        "backup": "bash backup.sh",
        "pull": "export $(grep -v '^#' config.env | xargs) && docker compose pull",
        "update": "npm run prerun && export $(grep -v '^#' config.env | xargs) && docker compose pull && npm run start",
        "dep-check": "npm install -g depcheck && depcheck ./ --skip-missing=true",
        "run-probes": "export $(grep -v '^#' config.env | xargs) && docker compose up --remove-orphans -d probe-1 probe-2",
        "deploy-test": "kubectl config use-context oneuptime-test && helm upgrade oneuptime ./HelmChart/Public/oneuptime -f ./HelmChart/Public/oneuptime/values.yaml  -f ./HelmChart/Values/test.values.yaml",
        "template-deploy-test": "kubectl config use-context oneuptime-test && helm template  oneuptime ./HelmChart/Public/oneuptime -f ./HelmChart/Public/oneuptime/values.yaml  -f ./HelmChart/Values/test.values.yaml --debug",
        "deploy-prod": "kubectl config use-context oneuptime-prod && helm upgrade oneuptime ./HelmChart/Public/oneuptime -f ./HelmChart/Public/oneuptime/values.yaml  -f ./HelmChart/Values/prod.values.yaml",
        "generate-postgres-migration": "export $(grep -v '^#' config.env | xargs) && node --require ts-node/register ./node_modules/typeorm/cli.js migration:generate ./Common/Server/Infrastructure/Postgres/SchemaMigrations/MigrationName -d ./Common/Server/Infrastructure/Postgres/LocalMigrationGenerationDataSource.ts",
        "generate-openapi-spec": "export $(grep -v '^#' config.env | xargs) && node --require ts-node/register ./Scripts/OpenAPI/GenerateSpec.ts ./openapi.json",
        "generate-terraform-provider": "export $(grep -v '^#' config.env | xargs) && node --require ts-node/register ./Scripts/TerraformProvider/GenerateProvider.ts",
        "install-terraform-provider-locally": "bash ./Scripts/TerraformProvider/install-terraform-provider-locally.sh --force",
        "generate-and-install-terraform-provider-locally": "npm run install-terraform-provider-locally",
        "publish-terraform-provider": "bash ./Scripts/TerraformProvider/publish-terraform-provider.sh"
    },
    "repository": {
        "type": "git",
        "url": "git+https://github.com/oneuptime/oneuptime.git"
    },
    "keywords": [],
    "author": "OneUptime <hello@oneuptime.com> (https://oneuptime.com/)",
    "license": "Apache-2.0",
    "bugs": {
        "url": "https://gitlab.com/oneuptime/app/issues"
    },
    "homepage": "https://gitlab.com/oneuptime/app#readme"
}
